version: '3.8'

services:
  # DeFi Execution Engine
  defi-engine:
    build: .
    container_name: defi-execution-engine
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - LOG_LEVEL=info
      - FRONTEND_URL=http://localhost:3000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ONEINCH_API_KEY=${ONEINCH_API_KEY}
      - ETHEREUM_RPC_URL=${ETHEREUM_RPC_URL}
      - POLYGON_RPC_URL=${POLYGON_RPC_URL}
      - BSC_RPC_URL=${BSC_RPC_URL}
      - ARBITRUM_RPC_URL=${ARBITRUM_RPC_URL}
      - OPTIMISM_RPC_URL=${OPTIMISM_RPC_URL}
      - FANTOM_RPC_URL=${FANTOM_RPC_URL}
      - AVALANCHE_RPC_URL=${AVALANCHE_RPC_URL}
      - CRONOS_RPC_URL=${CRONOS_RPC_URL}
      - BASE_RPC_URL=${BASE_RPC_URL}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - defi-network
    volumes:
      - ./logs:/app/logs:rw
    labels:
      - "com.unite-defi.service=execution-engine"
      - "com.unite-defi.environment=production"

  # Redis for caching and job queues
  redis:
    image: redis:7-alpine
    container_name: defi-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - defi-network
    labels:
      - "com.unite-defi.service=redis"
      - "com.unite-defi.environment=production"

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: defi-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - defi-engine
    networks:
      - defi-network
    labels:
      - "com.unite-defi.service=nginx"
      - "com.unite-defi.environment=production"

networks:
  defi-network:
    driver: bridge
    name: defi-network

volumes:
  redis-data:
    name: defi-redis-data
  nginx-logs:
    name: defi-nginx-logs