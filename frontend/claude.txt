// frontend/lib/oneinch-code-generator.ts - UPDATED VERSION
import { ExecutionStatus } from './workflow-execution-client'

export interface CodeGenerationResult {
  success: boolean
  files: Record<string, string>
  error?: string
  deploymentInfo: DeploymentInfo
}

export interface DeploymentInfo {
  backend: {
    port: number
    endpoints: string[]
    dependencies: string[]
  }
  frontend: {
    port: number
    framework: string
    dependencies: string[]
  }
}

export class CodeGenerator {
  
  async generateFullApplication(workflow: any): Promise<CodeGenerationResult> {
    try {
      const files: Record<string, string> = {}
      
      // Generate ALL frontend files
      const frontendFiles = this.generateCompleteFrontendStructure(workflow)
      Object.assign(files, frontendFiles)
      
      // Generate ALL backend files  
      const backendFiles = this.generateCompleteBackendStructure(workflow)
      Object.assign(files, backendFiles)
      
      // Generate ALL configuration files
      const configFiles = this.generateCompleteConfigFiles(workflow)
      Object.assign(files, configFiles)
      
      // Generate documentation files
      const docFiles = this.generateDocumentationFiles(workflow)
      Object.assign(files, docFiles)

      console.log(`🎯 Total files generated: ${Object.keys(files).length}`)
      
      return {
        success: true,
        files,
        deploymentInfo: this.generateDeploymentInfo()
      }
      
    } catch (error: any) {
      return {
        success: false,
        files: {},
        error: error.message,
        deploymentInfo: this.generateDeploymentInfo()
      }
    }
  }

  private generateCompleteFrontendStructure(workflow: any): Record<string, string> {
    const files: Record<string, string> = {}
    
    // Frontend package.json
    files['frontend/package.json'] = this.generateFrontendPackageJson()
    
    // Next.js configuration files
    files['frontend/next.config.js'] = this.generateNextConfig()
    files['frontend/tailwind.config.js'] = this.generateTailwindConfig()
    files['frontend/postcss.config.js'] = this.generatePostCSSConfig()
    files['frontend/tsconfig.json'] = this.generateTSConfig()
    
    // App directory structure (Next.js 14)
    files['frontend/app/layout.tsx'] = this.generateRootLayout()
    files['frontend/app/page.tsx'] = this.generateMainPage(workflow)
    files['frontend/app/globals.css'] = this.generateGlobalCSS()
    
    // Components
    files['frontend/components/WalletConnector.tsx'] = this.generateWalletConnector()
    files['frontend/components/SwapInterface.tsx'] = this.generateSwapInterface()
    files['frontend/components/TokenSelector.tsx'] = this.generateTokenSelector()
    files['frontend/components/PriceDisplay.tsx'] = this.generatePriceDisplay()
    files['frontend/components/TransactionStatus.tsx'] = this.generateTransactionStatus()
    files['frontend/components/PortfolioTracker.tsx'] = this.generatePortfolioTracker()
    files['frontend/components/ChainSelector.tsx'] = this.generateChainSelector()
    files['frontend/components/LimitOrderInterface.tsx'] = this.generateLimitOrderInterface()
    
    // Hooks
    files['frontend/hooks/useWallet.ts'] = this.generateWalletHook()
    files['frontend/hooks/use1inch.ts'] = this.generate1inchHook()
    files['frontend/hooks/useTokens.ts'] = this.generateTokensHook()
    files['frontend/hooks/useTransactions.ts'] = this.generateTransactionsHook()
    
    // Utilities
    files['frontend/lib/wagmi.ts'] = this.generateWagmiConfig()
    files['frontend/lib/chains.ts'] = this.generateChainsConfig()
    files['frontend/lib/constants.ts'] = this.generateConstants()
    files['frontend/lib/utils.ts'] = this.generateUtils()
    files['frontend/lib/api.ts'] = this.generateAPIClient()
    
    // Types
    files['frontend/types/index.ts'] = this.generateTypes()
    
    // Environment files
    files['frontend/.env.example'] = this.generateFrontendEnvExample()
    files['frontend/.env.local'] = this.generateFrontendEnv()
    
    return files
  }

  private generateCompleteBackendStructure(workflow: any): Record<string, string> {
    const files: Record<string, string> = {}
    
    // Backend package.json
    files['backend/package.json'] = this.generateBackendPackageJson()
    
    // Main server file
    files['backend/src/index.ts'] = this.generateBackendIndex()
    
    // Routes
    files['backend/src/routes/swap.ts'] = this.generateSwapRoutes()
    files['backend/src/routes/quote.ts'] = this.generateQuoteRoutes()
    files['backend/src/routes/portfolio.ts'] = this.generatePortfolioRoutes()
    files['backend/src/routes/limitOrders.ts'] = this.generateLimitOrderRoutes()
    files['backend/src/routes/tokens.ts'] = this.generateTokenRoutes()
    
    // Services
    files['backend/src/services/oneinchService.ts'] = this.generate1inchService()
    files['backend/src/services/walletService.ts'] = this.generateWalletService()
    files['backend/src/services/priceService.ts'] = this.generatePriceService()
    files['backend/src/services/transactionService.ts'] = this.generateTransactionService()
    
    // Middleware
    files['backend/src/middleware/cors.ts'] = this.generateCorsMiddleware()
    files['backend/src/middleware/auth.ts'] = this.generateAuthMiddleware()
    files['backend/src/middleware/rateLimit.ts'] = this.generateRateLimitMiddleware()
    files['backend/src/middleware/errorHandler.ts'] = this.generateErrorHandler()
    
    // Utilities
    files['backend/src/utils/logger.ts'] = this.generateLogger()
    files['backend/src/utils/validation.ts'] = this.generateValidation()
    files['backend/src/utils/helpers.ts'] = this.generateBackendHelpers()
    
    // Types
    files['backend/src/types/index.ts'] = this.generateBackendTypes()
    
    // Configuration
    files['backend/src/config/database.ts'] = this.generateDatabaseConfig()
    files['backend/src/config/chains.ts'] = this.generateBackendChainsConfig()
    
    // Environment files
    files['backend/.env.example'] = this.generateBackendEnvExample()
    files['backend/.env'] = this.generateBackendEnv()
    
    // TypeScript config
    files['backend/tsconfig.json'] = this.generateBackendTSConfig()
    
    return files
  }

  private generateCompleteConfigFiles(workflow: any): Record<string, string> {
    const files: Record<string, string> = {}
    
    // Docker configuration
    files['docker-compose.yml'] = this.generateDockerCompose()
    files['frontend/Dockerfile'] = this.generateFrontendDockerfile()
    files['backend/Dockerfile'] = this.generateBackendDockerfile()
    
    // Git configuration
    files['.gitignore'] = this.generateGitignore()
    files['frontend/.gitignore'] = this.generateFrontendGitignore()
    files['backend/.gitignore'] = this.generateBackendGitignore()
    
    // ESLint configuration
    files['frontend/.eslintrc.json'] = this.generateESLintConfig()
    files['backend/.eslintrc.json'] = this.generateBackendESLintConfig()
    
    // Prettier configuration
    files['.prettierrc'] = this.generatePrettierConfig()
    files['.prettierignore'] = this.generatePrettierIgnore()
    
    // Vercel configuration
    files['vercel.json'] = this.generateVercelConfig()
    
    return files
  }

  private generateDocumentationFiles(workflow: any): Record<string, string> {
    const files: Record<string, string> = {}
    
    files['README.md'] = this.generateMainReadme(workflow)
    files['frontend/README.md'] = this.generateFrontendReadme()
    files['backend/README.md'] = this.generateBackendReadme()
    files['DEPLOYMENT.md'] = this.generateDeploymentGuide()
    files['API.md'] = this.generateAPIDocumentation()
    
    return files
  }

  // Frontend File Generators
  private generateFrontendPackageJson(): string {
    return `{
  "name": "defi-app-frontend",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "type-check": "tsc --noEmit"
  },
  "dependencies": {
    "next": "^14.0.0",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "wagmi": "^1.4.0",
    "viem": "^1.19.0",
    "@tanstack/react-query": "^4.36.0",
    "@rainbow-me/rainbowkit": "^1.3.0",
    "ethers": "^6.8.0",
    "axios": "^1.6.0",
    "react-hot-toast": "^2.4.0",
    "lucide-react": "^0.294.0",
    "clsx": "^2.0.0",
    "tailwind-merge": "^2.0.0",
    "framer-motion": "^10.16.0",
    "recharts": "^2.8.0"
  },
  "devDependencies": {
    "@types/node": "^20.0.0",
    "@types/react": "^18.0.0",
    "@types/react-dom": "^18.0.0",
    "typescript": "^5.0.0",
    "tailwindcss": "^3.3.0",
    "autoprefixer": "^10.4.0",
    "postcss": "^8.4.0",
    "eslint": "^8.0.0",
    "eslint-config-next": "^14.0.0"
  }
}`
  }

  private generateBackendPackageJson(): string {
    return `{
  "name": "defi-app-backend",
  "version": "1.0.0",
  "description": "DeFi Application Backend",
  "main": "dist/index.js",
  "scripts": {
    "dev": "ts-node-dev --respawn --transpile-only src/index.ts",
    "build": "tsc",
    "start": "node dist/index.js",
    "lint": "eslint src/**/*.ts",
    "test": "jest"
  },
  "dependencies": {
    "express": "^4.18.0",
    "cors": "^2.8.5",
    "dotenv": "^16.3.0",
    "helmet": "^7.1.0",
    "morgan": "^1.10.0",
    "axios": "^1.6.0",
    "ethers": "^6.8.0",
    "socket.io": "^4.7.0",
    "express-rate-limit": "^7.1.0",
    "compression": "^1.7.4"
  },
  "devDependencies": {
    "@types/express": "^4.17.0",
    "@types/cors": "^2.8.0",
    "@types/morgan": "^1.9.0",
    "@types/compression": "^1.7.0",
    "@types/node": "^20.0.0",
    "typescript": "^5.0.0",
    "ts-node-dev": "^2.0.0",
    "eslint": "^8.0.0",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0"
  }
}`
  }

  private generateMainPage(workflow: any): string {
    return `'use client'

import { useState } from 'react'
import { WalletConnector } from '@/components/WalletConnector'
import { SwapInterface } from '@/components/SwapInterface'
import { PortfolioTracker } from '@/components/PortfolioTracker'
import { ChainSelector } from '@/components/ChainSelector'
import { LimitOrderInterface } from '@/components/LimitOrderInterface'

export default function Home() {
  const [activeTab, setActiveTab] = useState('swap')

  return (
    <main className="min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-indigo-900">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-4xl font-bold text-white">
            DeFi Suite
          </h1>
          <div className="flex gap-4">
            <ChainSelector />
            <WalletConnector />
          </div>
        </div>

        {/* Navigation */}
        <div className="flex gap-4 mb-8">
          {[
            { id: 'swap', label: 'Swap' },
            { id: 'portfolio', label: 'Portfolio' },
            { id: 'limit-orders', label: 'Limit Orders' }
          ].map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={\`px-6 py-3 rounded-lg font-medium transition-all \${
                activeTab === tab.id
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
              }\`}
            >
              {tab.label}
            </button>
          ))}
        </div>

        {/* Content */}
        <div className="bg-white/10 backdrop-blur-lg rounded-xl p-8">
          {activeTab === 'swap' && <SwapInterface />}
          {activeTab === 'portfolio' && <PortfolioTracker />}
          {activeTab === 'limit-orders' && <LimitOrderInterface />}
        </div>
      </div>
    </main>
  )
}`
  }

  private generateSwapInterface(): string {
    return `'use client'

import { useState, useEffect } from 'react'
import { useWallet } from '@/hooks/useWallet'
import { use1inch } from '@/hooks/use1inch'
import { TokenSelector } from './TokenSelector'
import { PriceDisplay } from './PriceDisplay'
import { TransactionStatus } from './TransactionStatus'
import { ArrowDownUp } from 'lucide-react'
import toast from 'react-hot-toast'

export function SwapInterface() {
  const { address, isConnected } = useWallet()
  const { getQuote, executeSwap, isLoading } = use1inch()
  
  const [fromToken, setFromToken] = useState(null)
  const [toToken, setToToken] = useState(null)
  const [fromAmount, setFromAmount] = useState('')
  const [quote, setQuote] = useState(null)
  const [transaction, setTransaction] = useState(null)

  const handleSwap = async () => {
    if (!fromToken || !toToken || !fromAmount) {
      toast.error('Please select tokens and amount')
      return
    }

    try {
      const result = await executeSwap({
        fromToken: fromToken.address,
        toToken: toToken.address,
        amount: fromAmount,
        fromAddress: address
      })
      
      setTransaction(result)
      toast.success('Swap submitted!')
      
    } catch (error) {
      toast.error('Swap failed: ' + error.message)
    }
  }

  const getQuoteData = async () => {
    if (fromToken && toToken && fromAmount) {
      try {
        const quoteData = await getQuote({
          fromToken: fromToken.address,
          toToken: toToken.address,
          amount: fromAmount
        })
        setQuote(quoteData)
      } catch (error) {
        console.error('Quote failed:', error)
      }
    }
  }

  useEffect(() => {
    getQuoteData()
  }, [fromToken, toToken, fromAmount])

  return (
    <div className="max-w-md mx-auto space-y-6">
      <h2 className="text-2xl font-bold text-white text-center">Token Swap</h2>
      
      {/* From Token */}
      <div className="bg-gray-800 rounded-lg p-4">
        <label className="block text-sm font-medium text-gray-300 mb-2">
          From
        </label>
        <div className="flex gap-3">
          <TokenSelector
            selectedToken={fromToken}
            onTokenSelect={setFromToken}
            excludeToken={toToken?.address}
          />
          <input
            type="number"
            value={fromAmount}
            onChange={(e) => setFromAmount(e.target.value)}
            placeholder="0.0"
            className="flex-1 bg-gray-700 text-white rounded-lg px-3 py-2"
          />
        </div>
      </div>

      {/* Swap Direction Button */}
      <div className="flex justify-center">
        <button
          onClick={() => {
            setFromToken(toToken)
            setToToken(fromToken)
            setFromAmount('')
          }}
          className="bg-blue-600 hover:bg-blue-700 rounded-full p-2 transition-colors"
        >
          <ArrowDownUp className="h-5 w-5 text-white" />
        </button>
      </div>

      {/* To Token */}
      <div className="bg-gray-800 rounded-lg p-4">
        <label className="block text-sm font-medium text-gray-300 mb-2">
          To
        </label>
        <div className="flex gap-3">
          <TokenSelector
            selectedToken={toToken}
            onTokenSelect={setToToken}
            excludeToken={fromToken?.address}
          />
          <div className="flex-1 bg-gray-700 text-white rounded-lg px-3 py-2 flex items-center">
            {quote ? quote.toTokenAmount : '0.0'}
          </div>
        </div>
      </div>

      {/* Price Display */}
      {quote && (
        <PriceDisplay
          fromToken={fromToken}
          toToken={toToken}
          quote={quote}
        />
      )}

      {/* Swap Button */}
      <button
        onClick={handleSwap}
        disabled={!isConnected || isLoading || !fromToken || !toToken || !fromAmount}
        className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white font-medium py-3 rounded-lg transition-colors"
      >
        {isLoading ? 'Swapping...' : 'Swap'}
      </button>

      {/* Transaction Status */}
      {transaction && (
        <TransactionStatus transaction={transaction} />
      )}
    </div>
  )
}`
  }

  private generateBackendIndex(): string {
    return `import express from 'express'
import cors from 'cors'
import helmet from 'helmet'
import morgan from 'morgan'
import compression from 'compression'
import { createServer } from 'http'
import { Server } from 'socket.io'
import dotenv from 'dotenv'

import swapRoutes from './routes/swap'
import quoteRoutes from './routes/quote'
import portfolioRoutes from './routes/portfolio'
import limitOrderRoutes from './routes/limitOrders'
import tokenRoutes from './routes/tokens'

import { corsMiddleware } from './middleware/cors'
import { authMiddleware } from './middleware/auth'
import { rateLimitMiddleware } from './middleware/rateLimit'
import { errorHandler } from './middleware/errorHandler'

dotenv.config()

const app = express()
const server = createServer(app)
const io = new Server(server, {
  cors: {
    origin: process.env.FRONTEND_URL || "http://localhost:3000",
    credentials: true
  }
})

const PORT = process.env.PORT || 3001

// Middleware
app.use(helmet())
app.use(compression())
app.use(morgan('combined'))
app.use(corsMiddleware)
app.use(express.json({ limit: '10mb' }))
app.use(express.urlencoded({ extended: true }))
app.use(rateLimitMiddleware)

// Health check
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  })
})

// Routes
app.use('/api/swap', swapRoutes)
app.use('/api/quote', quoteRoutes)
app.use('/api/portfolio', portfolioRoutes)
app.use('/api/limit-orders', limitOrderRoutes)
app.use('/api/tokens', tokenRoutes)

// WebSocket connections
io.on('connection', (socket) => {
  console.log('Client connected:', socket.id)
  
  socket.on('subscribe-quotes', (tokenPair) => {
    // Handle real-time quote subscriptions
    socket.join(\`quotes-\${tokenPair}\`)
  })
  
  socket.on('subscribe-transactions', (address) => {
    // Handle transaction monitoring
    socket.join(\`transactions-\${address}\`)
  })
  
  socket.on('disconnect', () => {
    console.log('Client disconnected:', socket.id)
  })
})

// Error handling
app.use(errorHandler)

// Start server
server.listen(PORT, () => {
  console.log(\`🚀 Server running on port \${PORT}\`)
  console.log(\`📊 Health check: http://localhost:\${PORT}/api/health\`)
})`
  }

  private generateMainReadme(workflow: any): string {
    return `# 🚀 DeFi Application Suite

A complete multi-chain DeFi application built with modern Web3 technologies.

## ✨ Features

- 🔄 **Token Swapping** - Best rates via 1inch aggregation
- 💰 **Portfolio Tracking** - Real-time balance monitoring
- 📊 **Limit Orders** - Advanced trading capabilities
- 🌐 **Multi-Chain Support** - Ethereum, Polygon, Arbitrum, BSC
- 🔒 **MEV Protection** - Gasless swaps with Fusion
- 📱 **Responsive Design** - Mobile-first interface

## 🏗️ Architecture

### Frontend (Next.js 14)
- **Framework**: Next.js with App Router
- **Styling**: Tailwind CSS
- **Web3**: Wagmi + RainbowKit
- **State**: React Query

### Backend (Node.js)
- **Framework**: Express.js with TypeScript
- **API**: RESTful + WebSocket
- **Integration**: 1inch Protocol APIs
- **Security**: Helmet, CORS, Rate limiting

## 🚀 Quick Start

### Prerequisites
- Node.js 18+
- npm or yarn
- MetaMask or compatible wallet

### Installation

1. **Clone the repository**
   \`\`\`bash
   git clone <repository-url>
   cd defi-app-suite
   \`\`\`

2. **Install dependencies**
   \`\`\`bash
   # Frontend
   cd frontend
   npm install
   
   # Backend
   cd ../backend
   npm install
   \`\`\`

3. **Environment Setup**
   \`\`\`bash
   # Frontend
   cp frontend/.env.example frontend/.env.local
   
   # Backend
   cp backend/.env.example backend/.env
   \`\`\`

4. **Start development servers**
   \`\`\`bash
   # Backend (Terminal 1)
   cd backend
   npm run dev
   
   # Frontend (Terminal 2)
   cd frontend
   npm run dev
   \`\`\`

5. **Open application**
   Visit [http://localhost:3000](http://localhost:3000)

## 📋 Environment Variables

### Frontend (.env.local)
\`\`\`
NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID=your_project_id
NEXT_PUBLIC_1INCH_API_KEY=your_1inch_api_key
NEXT_PUBLIC_BACKEND_URL=http://localhost:3001
\`\`\`

### Backend (.env)
\`\`\`
PORT=3001
ONEINCH_API_KEY=your_1inch_api_key
FRONTEND_URL=http://localhost:3000
NODE_ENV=development
\`\`\`

## 🐳 Docker Deployment

\`\`\`bash
docker-compose up -d
\`\`\`

## 📚 API Documentation

See [API.md](./API.md) for complete API documentation.

## 🚀 Deployment

See [DEPLOYMENT.md](./DEPLOYMENT.md) for deployment instructions.

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Submit a pull request

## 📄 License

MIT License - see LICENSE file for details.

---

**Built with 💙 using 1inch Protocol**`
  }

  private generateDeploymentInfo(): DeploymentInfo {
    return {
      backend: {
        port: 3001,
        endpoints: [
          '/api/health',
          '/api/swap',
          '/api/quote',
          '/api/portfolio',
          '/api/limit-orders',
          '/api/tokens'
        ],
        dependencies: [
          'express',
          'cors',
          'dotenv',
          'helmet',
          'socket.io'
        ]
      },
      frontend: {
        port: 3000,
        framework: 'Next.js 14',
        dependencies: [
          'next',
          'react',
          'wagmi',
          'tailwindcss',
          '@rainbow-me/rainbowkit'
        ]
      }
    }
  }

  // Add all other generator methods...
  // (Due to space constraints, I'm showing the key structure)
  // You would implement all the other generate methods similarly

  private generateWalletConnector(): string {
    return `// WalletConnector component implementation`
  }

  private generateTokenSelector(): string {
    return `// TokenSelector component implementation`
  }

  // ... implement all other methods
}