'use client'

import React, { useState } from 'react'
import { Node } from '@xyflow/react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { X } from 'lucide-react'

// Import SUPPORTED_CHAINS from the chains configuration
// This will be generated by the code generator
const SUPPORTED_CHAINS: Record<string, { name: string; symbol: string; rpcUrl: string; blockExplorer: string }> = {
  '1': { name: 'Ethereum', symbol: 'ETH', rpcUrl: 'https://eth-mainnet.g.alchemy.com/v2/', blockExplorer: 'https://etherscan.io' },
  '137': { name: 'Polygon', symbol: 'MATIC', rpcUrl: 'https://polygon-rpc.com', blockExplorer: 'https://polygonscan.com' },
  '56': { name: 'BSC', symbol: 'BNB', rpcUrl: 'https://bsc-dataseed.binance.org', blockExplorer: 'https://bscscan.com' },
  '42161': { name: 'Arbitrum', symbol: 'ARB', rpcUrl: 'https://arb1.arbitrum.io/rpc', blockExplorer: 'https://arbiscan.io' },
  '10': { name: 'Optimism', symbol: 'OP', rpcUrl: 'https://mainnet.optimism.io', blockExplorer: 'https://optimistic.etherscan.io' },
  '43114': { name: 'Avalanche', symbol: 'AVAX', rpcUrl: 'https://api.avax.network/ext/bc/C/rpc', blockExplorer: 'https://snowtrace.io' }
}

interface NodeConfigPanelProps {
  node: Node
  onConfigChange: (config: any) => void
  onClose: () => void
  mode?: 'edit' | 'preview'
}

export function NodeConfigPanel({ node, onConfigChange, onClose, mode = 'edit' }: NodeConfigPanelProps) {
  const [config, setConfig] = useState(node.data?.config || {})

  const handleConfigUpdate = (key: string, value: any) => {
    const newConfig = { ...config, [key]: value }
    setConfig(newConfig)
    onConfigChange(newConfig)
  }

  const renderConfigPanel = () => {
    switch (node.type) {
      case "chainSelector":
        return (
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="supportedChains">Supported Chains</Label>
              <div className="space-y-2">
                {Object.entries(SUPPORTED_CHAINS).map(([chainId, chain]) => (
                  <div key={chainId} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id={`chain-${chainId}`}
                      checked={config.supportedChains?.includes(chainId) || false}
                      onChange={(e) => {
                        const current = config.supportedChains || [];
                        if (e.target.checked) {
                          handleConfigUpdate("supportedChains", [...current, chainId]);
                        } else {
                          handleConfigUpdate("supportedChains", current.filter(c => c !== chainId));
                        }
                      }}
                    />
                    <label htmlFor={`chain-${chainId}`} className="text-sm">
                      {chain.name} ({chain.symbol})
                    </label>
                  </div>
                ))}
              </div>
            </div>
            <div className="space-y-2">
              <Label htmlFor="defaultChain">Default Chain</Label>
              <Select 
                value={config.defaultChain || "1"} 
                onValueChange={(value) => handleConfigUpdate("defaultChain", value)}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {Object.entries(SUPPORTED_CHAINS).map(([id, chain]) => (
                    <SelectItem key={id} value={id}>
                      {chain.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        )

      case "oneInchSwap":
      case "oneInchQuote":
        return (
          <div className="space-y-4">
            {/* Only show API key field in live preview mode */}
            {mode === 'preview' && (
              <div className="space-y-2">
                <Label htmlFor="apiKey">1inch API Key (Live Preview Only)</Label>
                <Input
                  id="apiKey"
                  type="password"
                  value={config.apiKey || ""}
                  onChange={(e) => handleConfigUpdate("apiKey", e.target.value)}
                  placeholder="Enter your 1inch API key for live preview"
                />
                <p className="text-xs text-gray-500">
                  This is only needed for live preview testing. The generated code will use environment variables.
                </p>
              </div>
            )}
            
            <div className="space-y-2">
              <Label htmlFor="slippage">Default Slippage (%)</Label>
              <Input
                id="slippage"
                type="number"
                min="0.1"
                max="50"
                step="0.1"
                value={config.slippage || "1"}
                onChange={(e) => handleConfigUpdate("slippage", e.target.value)}
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="enableFusion">Enable Fusion Mode</Label>
              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="enableFusion"
                  checked={config.enableFusion || false}
                  onChange={(e) => handleConfigUpdate("enableFusion", e.target.checked)}
                />
                <label htmlFor="enableFusion" className="text-sm">
                  Enable gasless swaps with MEV protection
                </label>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="supportedChains">Supported Chains</Label>
              <div className="max-h-32 overflow-y-auto space-y-1">
                {Object.entries(SUPPORTED_CHAINS).map(([chainId, chain]) => (
                  <div key={chainId} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id={`swap-chain-${chainId}`}
                      checked={config.supportedChains?.includes(chainId) || chainId === '1'}
                      onChange={(e) => {
                        const current = config.supportedChains || ['1'];
                        if (e.target.checked) {
                          handleConfigUpdate("supportedChains", [...current, chainId]);
                        } else {
                          handleConfigUpdate("supportedChains", current.filter(c => c !== chainId));
                        }
                      }}
                    />
                    <label htmlFor={`swap-chain-${chainId}`} className="text-sm">
                      {chain.name}
                    </label>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )

      case "tokenSelector":
        return (
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="defaultTokens">Default Tokens</Label>
              <Textarea
                id="defaultTokens"
                value={Array.isArray(config.defaultTokens) ? config.defaultTokens.join(', ') : (config.defaultTokens || 'ETH, USDC, USDT, DAI')}
                onChange={(e) => handleConfigUpdate("defaultTokens", e.target.value.split(',').map(t => t.trim()))}
                placeholder="ETH, USDC, USDT, DAI"
                rows={3}
              />
              <p className="text-xs text-gray-500">
                Comma-separated list of token symbols to display by default
              </p>
            </div>

            <div className="space-y-2">
              <Label htmlFor="allowCustomTokens">Allow Custom Tokens</Label>
              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="allowCustomTokens"
                  checked={config.allowCustomTokens !== false}
                  onChange={(e) => handleConfigUpdate("allowCustomTokens", e.target.checked)}
                />
                <label htmlFor="allowCustomTokens" className="text-sm">
                  Allow users to add custom token addresses
                </label>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="showBalances">Show Token Balances</Label>
              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="showBalances"
                  checked={config.showBalances !== false}
                  onChange={(e) => handleConfigUpdate("showBalances", e.target.checked)}
                />
                <label htmlFor="showBalances" className="text-sm">
                  Display user's token balances
                </label>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="priceSource">Price Data Source</Label>
              <Select 
                value={config.priceSource || "1inch"} 
                onValueChange={(value) => handleConfigUpdate("priceSource", value)}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="1inch">1inch API</SelectItem>
                  <SelectItem value="coingecko">CoinGecko</SelectItem>
                  <SelectItem value="coinmarketcap">CoinMarketCap</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        )

      case "erc20Token":
        return (
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="name">Token Name</Label>
              <Input
                id="name"
                value={config.name || ""}
                onChange={(e) => handleConfigUpdate("name", e.target.value)}
                placeholder="My Token"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="symbol">Token Symbol</Label>
              <Input
                id="symbol"
                value={config.symbol || ""}
                onChange={(e) => handleConfigUpdate("symbol", e.target.value)}
                placeholder="MTK"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="totalSupply">Total Supply</Label>
              <Input
                id="totalSupply"
                type="number"
                value={config.totalSupply || ""}
                onChange={(e) => handleConfigUpdate("totalSupply", e.target.value)}
                placeholder="1000000"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="decimals">Decimals</Label>
              <Input
                id="decimals"
                type="number"
                min="0"
                max="18"
                value={config.decimals || "18"}
                onChange={(e) => handleConfigUpdate("decimals", e.target.value)}
              />
            </div>
          </div>
        )

      case "dashboard":
        return (
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="title">Dashboard Title</Label>
              <Input
                id="title"
                value={config.title || ""}
                onChange={(e) => handleConfigUpdate("title", e.target.value)}
                placeholder="My Dashboard"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="components">Components</Label>
              <div className="space-y-2">
                {["header", "charts", "tables", "filters", "actions"].map((component) => (
                  <div key={component} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id={`component-${component}`}
                      checked={config.components?.includes(component) || false}
                      onChange={(e) => {
                        const current = config.components || [];
                        if (e.target.checked) {
                          handleConfigUpdate("components", [...current, component]);
                        } else {
                          handleConfigUpdate("components", current.filter(c => c !== component));
                        }
                      }}
                    />
                    <label htmlFor={`component-${component}`} className="text-sm capitalize">
                      {component}
                    </label>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )

      default:
        return (
          <div className="text-sm text-gray-500">
            No configuration options available for this node type.
          </div>
        )
    }
  }

  return (
    <div className="fixed right-4 top-4 w-80 bg-white border border-gray-200 rounded-lg shadow-lg z-50">
      <div className="flex items-center justify-between p-4 border-b border-gray-200">
        <h3 className="text-lg font-medium text-gray-900">
          Configure {node.data?.label || node.type}
        </h3>
        <Button
          variant="ghost"
          size="sm"
          onClick={onClose}
          className="h-8 w-8 p-0"
        >
          <X className="h-4 w-4" />
        </Button>
      </div>
      <div className="p-4 max-h-96 overflow-y-auto">
        {renderConfigPanel()}
      </div>
    </div>
  )
}